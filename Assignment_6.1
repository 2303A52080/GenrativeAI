{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNS1pqjJexQE0V3MQWpQjlz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A52080/GenrativeAI/blob/main/Assignment_6.1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qd61GlqMaaLS",
        "outputId": "6e8042ca-c775-4f32-9f0a-839ce00ef6a1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 104ms/step - loss: 234.5628 - mae: 15.2939 - val_loss: 202.8058 - val_mae: 14.2184 - learning_rate: 0.0020\n",
            "Epoch 2/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - loss: 171.4821 - mae: 12.9717 - val_loss: 33.4487 - val_mae: 5.2691 - learning_rate: 0.0020\n",
            "Epoch 3/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - loss: 21.1622 - mae: 3.6502 - val_loss: 8.1732 - val_mae: 2.2379 - learning_rate: 0.0020\n",
            "Epoch 4/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 10.4319 - mae: 2.4183 - val_loss: 6.8484 - val_mae: 2.0431 - learning_rate: 0.0020\n",
            "Epoch 5/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - loss: 8.0776 - mae: 2.2519 - val_loss: 6.1075 - val_mae: 1.9369 - learning_rate: 0.0020\n",
            "Epoch 6/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 7.7361 - mae: 2.1859 - val_loss: 5.1732 - val_mae: 1.7713 - learning_rate: 0.0020\n",
            "Epoch 7/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step - loss: 7.2479 - mae: 2.0312 - val_loss: 4.8379 - val_mae: 1.7132 - learning_rate: 0.0020\n",
            "Epoch 8/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 6.8529 - mae: 1.9856 - val_loss: 4.4771 - val_mae: 1.6212 - learning_rate: 0.0020\n",
            "Epoch 9/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - loss: 6.2190 - mae: 1.8281 - val_loss: 4.3438 - val_mae: 1.5732 - learning_rate: 0.0020\n",
            "Epoch 10/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 4.5410 - mae: 1.5752 - val_loss: 3.9142 - val_mae: 1.4580 - learning_rate: 0.0020\n",
            "Epoch 11/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 5.6278 - mae: 1.8413 - val_loss: 3.9007 - val_mae: 1.4696 - learning_rate: 0.0020\n",
            "Epoch 12/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - loss: 5.5135 - mae: 1.7905 - val_loss: 3.5881 - val_mae: 1.3824 - learning_rate: 0.0020\n",
            "Epoch 13/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - loss: 4.8823 - mae: 1.6347 - val_loss: 3.6113 - val_mae: 1.4101 - learning_rate: 0.0020\n",
            "Epoch 14/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - loss: 4.1552 - mae: 1.5123 - val_loss: 2.9890 - val_mae: 1.2405 - learning_rate: 0.0020\n",
            "Epoch 15/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 4.0958 - mae: 1.4696 - val_loss: 3.3254 - val_mae: 1.3657 - learning_rate: 0.0020\n",
            "Epoch 16/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 4.3901 - mae: 1.5640 - val_loss: 3.1596 - val_mae: 1.3250 - learning_rate: 0.0020\n",
            "Epoch 17/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 3.1105 - mae: 1.2873 - val_loss: 2.4668 - val_mae: 1.0234 - learning_rate: 0.0020\n",
            "Epoch 18/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 3.4466 - mae: 1.3750 - val_loss: 2.4324 - val_mae: 1.0080 - learning_rate: 0.0020\n",
            "Epoch 19/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 3.7751 - mae: 1.4174 - val_loss: 4.1995 - val_mae: 1.7040 - learning_rate: 0.0020\n",
            "Epoch 20/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 3.8792 - mae: 1.4692 - val_loss: 1.8861 - val_mae: 0.8942 - learning_rate: 0.0020\n",
            "Epoch 21/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - loss: 2.9920 - mae: 1.2706 - val_loss: 2.4013 - val_mae: 1.1723 - learning_rate: 0.0020\n",
            "Epoch 22/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - loss: 3.5691 - mae: 1.3902 - val_loss: 3.6347 - val_mae: 1.5421 - learning_rate: 0.0020\n",
            "Epoch 23/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 3.6797 - mae: 1.4495 - val_loss: 1.9721 - val_mae: 0.9097 - learning_rate: 0.0020\n",
            "Epoch 24/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 3.1720 - mae: 1.3147 - val_loss: 2.4897 - val_mae: 1.1650 - learning_rate: 0.0020\n",
            "Epoch 25/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 2.9196 - mae: 1.2493 - val_loss: 1.6514 - val_mae: 0.8192 - learning_rate: 0.0020\n",
            "Epoch 26/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - loss: 2.7561 - mae: 1.1621 - val_loss: 1.6302 - val_mae: 0.8293 - learning_rate: 0.0020\n",
            "Epoch 27/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 2.6280 - mae: 1.1629 - val_loss: 1.5118 - val_mae: 0.7662 - learning_rate: 0.0020\n",
            "Epoch 28/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 2.8654 - mae: 1.2618 - val_loss: 3.0017 - val_mae: 1.3777 - learning_rate: 0.0020\n",
            "Epoch 29/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - loss: 2.4966 - mae: 1.1404 - val_loss: 1.4174 - val_mae: 0.7510 - learning_rate: 0.0020\n",
            "Epoch 30/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - loss: 2.6758 - mae: 1.1509 - val_loss: 2.3260 - val_mae: 1.1405 - learning_rate: 0.0020\n",
            "Epoch 31/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - loss: 2.3256 - mae: 1.1133 - val_loss: 2.0866 - val_mae: 1.0677 - learning_rate: 0.0020\n",
            "Epoch 32/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 2.9631 - mae: 1.2565 - val_loss: 1.6359 - val_mae: 0.9207 - learning_rate: 0.0020\n",
            "Epoch 33/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 2.3210 - mae: 1.0901 - val_loss: 1.9072 - val_mae: 0.9819 - learning_rate: 0.0020\n",
            "Epoch 34/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - loss: 2.4556 - mae: 1.1581 - val_loss: 2.2862 - val_mae: 1.1821 - learning_rate: 0.0020\n",
            "Epoch 35/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step - loss: 2.3662 - mae: 1.1139 - val_loss: 2.3158 - val_mae: 1.2231 - learning_rate: 0.0010\n",
            "Epoch 36/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 2.4119 - mae: 1.1395 - val_loss: 1.8874 - val_mae: 1.0016 - learning_rate: 0.0010\n",
            "Epoch 37/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - loss: 2.2509 - mae: 1.0471 - val_loss: 3.1220 - val_mae: 1.4993 - learning_rate: 0.0010\n",
            "Epoch 38/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - loss: 2.5037 - mae: 1.1351 - val_loss: 1.1666 - val_mae: 0.6576 - learning_rate: 0.0010\n",
            "Epoch 39/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - loss: 2.1187 - mae: 0.9970 - val_loss: 1.6405 - val_mae: 0.9110 - learning_rate: 0.0010\n",
            "Epoch 40/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - loss: 2.0970 - mae: 1.0033 - val_loss: 1.3783 - val_mae: 0.7663 - learning_rate: 0.0010\n",
            "Epoch 41/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 2.3511 - mae: 1.1163 - val_loss: 2.6748 - val_mae: 1.3277 - learning_rate: 0.0010\n",
            "Epoch 42/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - loss: 2.2415 - mae: 1.0672 - val_loss: 1.4746 - val_mae: 0.8812 - learning_rate: 0.0010\n",
            "Epoch 43/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - loss: 1.8161 - mae: 0.9414 - val_loss: 1.9254 - val_mae: 1.0702 - learning_rate: 0.0010\n",
            "Epoch 44/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step - loss: 2.0763 - mae: 1.0317 - val_loss: 1.8284 - val_mae: 1.0017 - learning_rate: 5.0000e-04\n",
            "Epoch 45/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - loss: 2.2344 - mae: 1.0699 - val_loss: 2.1835 - val_mae: 1.1480 - learning_rate: 5.0000e-04\n",
            "Epoch 46/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step - loss: 2.0516 - mae: 0.9734 - val_loss: 1.6202 - val_mae: 0.8834 - learning_rate: 5.0000e-04\n",
            "Epoch 47/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - loss: 2.1214 - mae: 1.0483 - val_loss: 1.7744 - val_mae: 0.9631 - learning_rate: 5.0000e-04\n",
            "Epoch 48/50\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - loss: 1.8577 - mae: 0.9390 - val_loss: 2.0807 - val_mae: 1.1235 - learning_rate: 5.0000e-04\n",
            "\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.8063 - mae: 0.4834\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.0960 - mae: 0.6200\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training MAE: 0.48611006140708923, Testing MAE: 0.6576104760169983\n",
            "Optimized model saved as 'housing_price_model_optimized_fast.h5'.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 159ms/step\n",
            "Sample Predictions:\n",
            "[[ 421222.22]\n",
            " [4941249.  ]\n",
            " [2170197.5 ]\n",
            " [2538881.  ]\n",
            " [2148951.5 ]]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout\n",
        "from tensorflow.keras.regularizers import l2\n",
        "from tensorflow.keras import mixed_precision\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Enable mixed precision for faster training\n",
        "mixed_precision.set_global_policy('mixed_float16')\n",
        "\n",
        "# Load dataset\n",
        "file_path = \"Housing.csv\"\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Identify categorical and numerical columns\n",
        "categorical_columns = ['mainroad', 'guestroom', 'basement', 'hotwaterheating',\n",
        "                       'airconditioning', 'prefarea', 'furnishingstatus']\n",
        "numerical_columns = [col for col in df.columns if col not in categorical_columns + ['price']]\n",
        "\n",
        "# One-hot encode categorical variables\n",
        "df = pd.get_dummies(df, columns=categorical_columns, drop_first=True)\n",
        "\n",
        "# Handle skewness in target variable\n",
        "df['price'] = np.log1p(df['price'])\n",
        "\n",
        "# Separate features and target variable\n",
        "X = df.drop(columns=['price'])\n",
        "y = df['price']\n",
        "\n",
        "# Normalize numerical features\n",
        "scaler = StandardScaler()\n",
        "X[numerical_columns] = scaler.fit_transform(X[numerical_columns])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define the optimized ANN model\n",
        "model = Sequential([\n",
        "    Dense(128, activation='relu', kernel_regularizer=l2(0.001), input_shape=(X_train.shape[1],)),\n",
        "    Dropout(0.2),\n",
        "    Dense(256, activation='relu', kernel_regularizer=l2(0.001)),\n",
        "    Dropout(0.3),\n",
        "    Dense(128, activation='relu', kernel_regularizer=l2(0.001)),\n",
        "    Dropout(0.2),\n",
        "    Dense(64, activation='relu', kernel_regularizer=l2(0.001)),\n",
        "    Dense(32, activation='relu', kernel_regularizer=l2(0.001)),\n",
        "    Dense(1, activation='linear', dtype='float32')  # Ensure output is float32\n",
        "])\n",
        "\n",
        "# Compile the model with Nadam optimizer and learning rate scheduler\n",
        "model.compile(optimizer=tf.keras.optimizers.Nadam(learning_rate=0.002),\n",
        "              loss='mean_squared_error',\n",
        "              metrics=['mae'])\n",
        "\n",
        "# Callbacks for faster convergence\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
        "lr_schedule = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5)\n",
        "\n",
        "# Train the model with larger batch size for faster backpropagation\n",
        "model.fit(X_train, y_train, epochs=50, batch_size=64,\n",
        "          validation_data=(X_test, y_test), verbose=1,\n",
        "          callbacks=[early_stopping, lr_schedule])\n",
        "\n",
        "# Evaluate the model\n",
        "train_loss, train_mae = model.evaluate(X_train, y_train, verbose=1)\n",
        "test_loss, test_mae = model.evaluate(X_test, y_test, verbose=1)\n",
        "print(f'Training MAE: {train_mae}, Testing MAE: {test_mae}')\n",
        "\n",
        "# Save the optimized model\n",
        "model.save(\"/mnt/data/housing_price_model_optimized_fast.h5\")\n",
        "print(\"Optimized model saved as 'housing_price_model_optimized_fast.h5'.\")\n",
        "\n",
        "# Load and use the saved model\n",
        "loaded_model = tf.keras.models.load_model(\"/mnt/data/housing_price_model_optimized_fast.h5\")\n",
        "predictions = np.expm1(loaded_model.predict(X_test[:5]))\n",
        "\n",
        "# Display sample predictions\n",
        "print(\"Sample Predictions:\")\n",
        "print(predictions)\n"
      ]
    }
  ]
}